import {
  __commonJS
} from "./chunk-4YJ6HKSX.js";

// ../../node_modules/is-extendable/index.js
var require_is_extendable = __commonJS({
  "../../node_modules/is-extendable/index.js"(exports, module) {
    "use strict";
    module.exports = function isExtendable(val) {
      return typeof val !== "undefined" && val !== null && (typeof val === "object" || typeof val === "function");
    };
  }
});

// ../../node_modules/extend-shallow/index.js
var require_extend_shallow = __commonJS({
  "../../node_modules/extend-shallow/index.js"(exports, module) {
    "use strict";
    var isObject = require_is_extendable();
    module.exports = function extend(o) {
      if (!isObject(o)) {
        o = {};
      }
      var len = arguments.length;
      for (var i = 1; i < len; i++) {
        var obj = arguments[i];
        if (isObject(obj)) {
          assign(o, obj);
        }
      }
      return o;
    };
    function assign(a, b) {
      for (var key in b) {
        if (hasOwn(b, key)) {
          a[key] = b[key];
        }
      }
    }
    function hasOwn(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
  }
});

// ../../node_modules/unescape/index.js
var require_unescape = __commonJS({
  "../../node_modules/unescape/index.js"(exports, module) {
    var extend = require_extend_shallow();
    var regexCache = {};
    var all;
    var charSets = {
      default: {
        "&quot;": '"',
        "&#34;": '"',
        "&apos;": "'",
        "&#39;": "'",
        "&amp;": "&",
        "&#38;": "&",
        "&gt;": ">",
        "&#62;": ">",
        "&lt;": "<",
        "&#60;": "<"
      },
      extras: {
        "&cent;": "¢",
        "&#162;": "¢",
        "&copy;": "©",
        "&#169;": "©",
        "&euro;": "€",
        "&#8364;": "€",
        "&pound;": "£",
        "&#163;": "£",
        "&reg;": "®",
        "&#174;": "®",
        "&yen;": "¥",
        "&#165;": "¥"
      }
    };
    Object.defineProperty(charSets, "all", {
      get: function() {
        return all || (all = extend({}, charSets.default, charSets.extras));
      }
    });
    function unescape(str, type) {
      if (!isString(str)) return "";
      var chars = charSets[type || "default"];
      var regex = toRegex(type, chars);
      return str.replace(regex, function(m) {
        return chars[m];
      });
    }
    function toRegex(type, chars) {
      if (regexCache[type]) {
        return regexCache[type];
      }
      var keys = Object.keys(chars).join("|");
      var regex = new RegExp("(?=(" + keys + "))\\1", "g");
      regexCache[type] = regex;
      return regex;
    }
    function isString(str) {
      return str && typeof str === "string";
    }
    unescape.chars = charSets.default;
    unescape.extras = charSets.extras;
    Object.defineProperty(unescape, "all", {
      get: function() {
        return charSets.all;
      }
    });
    module.exports = unescape;
  }
});
export default require_unescape();
/*! Bundled license information:

is-extendable/index.js:
  (*!
   * is-extendable <https://github.com/jonschlinkert/is-extendable>
   *
   * Copyright (c) 2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)
*/
//# sourceMappingURL=unescape.js.map
