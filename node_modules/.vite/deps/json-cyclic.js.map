{
  "version": 3,
  "sources": ["../../../../../node_modules/json-cyclic/src/utils/utils.js", "../../../../../node_modules/json-cyclic/src/validate/validate.js", "../../../../../node_modules/json-cyclic/src/encycle/encycle.js", "../../../../../node_modules/json-cyclic/src/decycle/decycle.js"],
  "sourcesContent": ["export const isArray = (value) => Array.isArray(value);\n\nexport const isObject = (value) =>\n  Object.prototype.toString.call(value).slice(8, -1) === \"Object\";\n", "import { isArray, isObject } from \"../utils\";\n\nexport const validate = (value) => {\n  if (typeof value === \"undefined\") {\n    throw new Error(\"This method requires one parameter\");\n  }\n\n  if (!isArray(value) && !isObject(value)) {\n    throw new TypeError(\"This method only accepts arrays and objects\");\n  }\n};\n\nexport default validate;\n", "import { isArray, isObject } from \"../utils\";\nimport validate from \"../validate\";\n\nexport const isRef = (value) =>\n  isObject(value) &&\n  value.hasOwnProperty(\"$ref\") &&\n  Object.keys(value).length === 1 &&\n  !!value.$ref &&\n  value.$ref.charAt(0) === \"$\";\n\nexport const encycle = (arg) => {\n  validate(arg);\n\n  const recurs = (value) => {\n    if (isArray(value) || isObject(value)) {\n      if (isArray(value)) {\n        return value.map((elem, i) => {\n          if (isRef(elem)) {\n            value[i] = eval(\"arg\" + elem.$ref.slice(1));\n\n            return value;\n          }\n\n          return recurs(elem);\n        });\n      }\n\n      return Object.keys(value).reduce((accum, key) => {\n        if (isRef(value[key])) {\n          accum[key] = eval(\"arg\" + value[key].$ref.slice(1));\n        } else {\n          accum[key] = recurs(value[key]);\n        }\n\n        return accum;\n      }, value);\n    }\n\n    return value;\n  };\n\n  return recurs(arg);\n};\n\nexport default encycle;\n", "import { isArray, isObject } from \"../utils\";\nimport validate from \"../validate\";\n\nexport const findRef = (ref, visitedRefs) =>\n  Object.keys(visitedRefs).find((key) => visitedRefs[key] === ref);\n\nexport const decycle = (arg) => {\n  validate(arg);\n\n  let visitedRefs = {};\n\n  const recurs = (value, path = \"$\") => {\n    const ref = findRef(value, visitedRefs);\n\n    if (ref) {\n      return { $ref: ref };\n    }\n\n    if (isArray(value) || isObject(value)) {\n      visitedRefs[path] = value;\n\n      if (isArray(value)) {\n        return value.map((elem, i) => recurs(elem, `${path}[${i}]`));\n      }\n\n      return Object.keys(value).reduce((accum, key) => {\n        accum[key] = recurs(value[key], `${path}.${key}`);\n\n        return accum;\n      }, {});\n    }\n\n    return value;\n  };\n\n  return recurs(arg);\n};\n\nexport default decycle;\n"],
  "mappings": ";;;;;;;QAAaA,UAAWC,OAAUC,MAAMF,QAAQC,CAAAA;QAEnCE,WAAYF,OACgC,aAAvDG,OAAOC,UAAUC,SAASC,KAAKN,CAAAA,EAAOO,MAAM,GAAA,EAAI;QCDrCC,WAAYR,OAAAA;AACvB,UAAA,WAAWA,EACT,OAAA,IAAUS,MAAM,oCAAA;AAGlB,UAAA,CAAKV,QAAQC,CAAAA,KAAAA,CAAWE,SAASF,CAAAA,EAC/B,OAAA,IAAUU,UAAU,6CAAA;IAAA;QCLXC,QAASX,OACpBE,SAASF,CAAAA,KACTA,EAAMY,eAAe,MAAA,KACS,MAA9BT,OAAOU,KAAKb,CAAAA,EAAOc,UAAAA,CAAAA,CACjBd,EAAMe,QACiB,QAAzBf,EAAMe,KAAKC,OAAO,CAAA;QAEPC,UAAWC,SAAAA;AACtBV,eAASU,GAAAA;AAET,YAAMC,SAAUnB,WACVD,QAAQC,KAAAA,KAAUE,SAASF,KAAAA,IACzBD,QAAQC,KAAAA,IACHA,MAAMoB,IAAI,CAACC,MAAMC,MAClBX,MAAMU,IAAAA,KACRrB,MAAMsB,CAAAA,IAAKC,KAAK,QAAQF,KAAKN,KAAKR,MAAM,CAAA,CAAA,GAEjCP,SAGFmB,OAAOE,IAAAA,CAAAA,IAIXlB,OAAOU,KAAKb,KAAAA,EAAOwB,OAAO,CAACC,OAAOC,SAErCD,MAAMC,GAAAA,IADJf,MAAMX,MAAM0B,GAAAA,CAAAA,IACDH,KAAK,QAAQvB,MAAM0B,GAAAA,EAAKX,KAAKR,MAAM,CAAA,CAAA,IAEnCY,OAAOnB,MAAM0B,GAAAA,CAAAA,GAGrBD,QACNzB,KAAAA,IAGEA;AAGT,aAAOmB,OAAOD,GAAAA;IAAAA;QCtCHS,UAAU,CAACC,GAAKC,MAC3B1B,OAAOU,KAAKgB,CAAAA,EAAaC,KAAMJ,OAAQG,EAAYH,CAAAA,MAASE,CAAAA;QAEjDG,UAAWb,OAAAA;AACtBV,eAASU,CAAAA;AAET,UAAIW,IAAc,CAAA;AAElB,YAAMV,IAAS,CAACnB,IAAOgC,IAAO,QAAA;AAC5B,cAAMJ,IAAMD,QAAQ3B,IAAO6B,CAAAA;AAE3B,eAAID,IACK,EAAEb,MAAMa,EAAAA,IAGb7B,QAAQC,EAAAA,KAAUE,SAASF,EAAAA,KAC7B6B,EAAYG,CAAAA,IAAQhC,IAEhBD,QAAQC,EAAAA,IACHA,GAAMoB,IAAI,CAACC,IAAMC,OAAMH,EAAOE,IAAO,GAAEW,CAAAA,IAAQV,EAAAA,GAAAA,CAAAA,IAGjDnB,OAAOU,KAAKb,EAAAA,EAAOwB,OAAO,CAACC,IAAOC,QACvCD,GAAMC,EAAAA,IAAOP,EAAOnB,GAAM0B,EAAAA,GAAO,GAAEM,CAAAA,IAAQN,EAAAA,EAAAA,GAEpCD,KACN,CAAA,CAAA,KAGEzB;MAAAA;AAGT,aAAOmB,EAAOD,CAAAA;IAAAA;AAAAA,YAAAA,UAAAA,SAAAA,QAAAA,UAAAA;;;",
  "names": ["isArray", "value", "Array", "isObject", "Object", "prototype", "toString", "call", "slice", "validate", "Error", "TypeError", "isRef", "hasOwnProperty", "keys", "length", "$ref", "charAt", "encycle", "arg", "recurs", "map", "elem", "i", "eval", "reduce", "accum", "key", "findRef", "ref", "visitedRefs", "find", "decycle", "path"]
}
